// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `task_result.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto_data.TestTaskData)
pub struct TestTaskData {
    // message fields
    // @@protoc_insertion_point(field:proto_data.TestTaskData.version)
    pub version: u32,
    // @@protoc_insertion_point(field:proto_data.TestTaskData.batch)
    pub batch: u32,
    // @@protoc_insertion_point(field:proto_data.TestTaskData.accuracy)
    pub accuracy: f64,
    // special fields
    // @@protoc_insertion_point(special_field:proto_data.TestTaskData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestTaskData {
    fn default() -> &'a TestTaskData {
        <TestTaskData as ::protobuf::Message>::default_instance()
    }
}

impl TestTaskData {
    pub fn new() -> TestTaskData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &TestTaskData| { &m.version },
            |m: &mut TestTaskData| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch",
            |m: &TestTaskData| { &m.batch },
            |m: &mut TestTaskData| { &mut m.batch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "accuracy",
            |m: &TestTaskData| { &m.accuracy },
            |m: &mut TestTaskData| { &mut m.accuracy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestTaskData>(
            "TestTaskData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestTaskData {
    const NAME: &'static str = "TestTaskData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.batch = is.read_uint32()?;
                },
                25 => {
                    self.accuracy = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.batch != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.batch);
        }
        if self.accuracy != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.batch != 0 {
            os.write_uint32(2, self.batch)?;
        }
        if self.accuracy != 0. {
            os.write_double(3, self.accuracy)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestTaskData {
        TestTaskData::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.batch = 0;
        self.accuracy = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestTaskData {
        static instance: TestTaskData = TestTaskData {
            version: 0,
            batch: 0,
            accuracy: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestTaskData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestTaskData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestTaskData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestTaskData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto_data.TaskResultData)
pub struct TaskResultData {
    // message oneof groups
    pub result: ::std::option::Option<task_result_data::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:proto_data.TaskResultData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TaskResultData {
    fn default() -> &'a TaskResultData {
        <TaskResultData as ::protobuf::Message>::default_instance()
    }
}

impl TaskResultData {
    pub fn new() -> TaskResultData {
        ::std::default::Default::default()
    }

    // .ModelStorageData delta = 2;

    pub fn delta(&self) -> &super::common::ModelStorageData {
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::Delta(ref v)) => v,
            _ => <super::common::ModelStorageData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delta(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_delta(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::Delta(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delta(&mut self, v: super::common::ModelStorageData) {
        self.result = ::std::option::Option::Some(task_result_data::Result::Delta(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delta(&mut self) -> &mut super::common::ModelStorageData {
        if let ::std::option::Option::Some(task_result_data::Result::Delta(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(task_result_data::Result::Delta(super::common::ModelStorageData::new()));
        }
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::Delta(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delta(&mut self) -> super::common::ModelStorageData {
        if self.has_delta() {
            match self.result.take() {
                ::std::option::Option::Some(task_result_data::Result::Delta(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::ModelStorageData::new()
        }
    }

    // .proto_data.TestTaskData test_data = 3;

    pub fn test_data(&self) -> &TestTaskData {
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::TestData(ref v)) => v,
            _ => <TestTaskData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_data(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_test_data(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::TestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_data(&mut self, v: TestTaskData) {
        self.result = ::std::option::Option::Some(task_result_data::Result::TestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_data(&mut self) -> &mut TestTaskData {
        if let ::std::option::Option::Some(task_result_data::Result::TestData(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(task_result_data::Result::TestData(TestTaskData::new()));
        }
        match self.result {
            ::std::option::Option::Some(task_result_data::Result::TestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_data(&mut self) -> TestTaskData {
        if self.has_test_data() {
            match self.result.take() {
                ::std::option::Option::Some(task_result_data::Result::TestData(v)) => v,
                _ => panic!(),
            }
        } else {
            TestTaskData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::common::ModelStorageData>(
            "delta",
            TaskResultData::has_delta,
            TaskResultData::delta,
            TaskResultData::mut_delta,
            TaskResultData::set_delta,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestTaskData>(
            "test_data",
            TaskResultData::has_test_data,
            TaskResultData::test_data,
            TaskResultData::mut_test_data,
            TaskResultData::set_test_data,
        ));
        oneofs.push(task_result_data::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TaskResultData>(
            "TaskResultData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TaskResultData {
    const NAME: &'static str = "TaskResultData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.result = ::std::option::Option::Some(task_result_data::Result::Delta(is.read_message()?));
                },
                26 => {
                    self.result = ::std::option::Option::Some(task_result_data::Result::TestData(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &task_result_data::Result::Delta(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &task_result_data::Result::TestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &task_result_data::Result::Delta(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &task_result_data::Result::TestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TaskResultData {
        TaskResultData::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TaskResultData {
        static instance: TaskResultData = TaskResultData {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TaskResultData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TaskResultData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TaskResultData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskResultData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TaskResultData`
pub mod task_result_data {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:proto_data.TaskResultData.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:proto_data.TaskResultData.delta)
        Delta(super::super::common::ModelStorageData),
        // @@protoc_insertion_point(oneof_field:proto_data.TaskResultData.test_data)
        TestData(super::TestTaskData),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TaskResultData as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11task_result.proto\x12\nproto_data\x1a\x0ccommon.proto\"Z\n\x0cTest\
    TaskData\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x14\n\
    \x05batch\x18\x02\x20\x01(\rR\x05batch\x12\x1a\n\x08accuracy\x18\x03\x20\
    \x01(\x01R\x08accuracy\"~\n\x0eTaskResultData\x12)\n\x05delta\x18\x02\
    \x20\x01(\x0b2\x11.ModelStorageDataH\0R\x05delta\x127\n\ttest_data\x18\
    \x03\x20\x01(\x0b2\x18.proto_data.TestTaskDataH\0R\x08testDataB\x08\n\
    \x06resultb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TestTaskData::generated_message_descriptor_data());
            messages.push(TaskResultData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
